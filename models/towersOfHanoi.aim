#instance: 			nrTurnuri:int, nrPiese:int; 
					instance.nrTurnuri = nrTurnuri; instance.nrPiese = nrPiese;
#initial-state: 	initialState = [];
					foreach i <- [0, instance.nrPiese-1]:
						append(initialState, 1)
					end
					return initialState;
#valid-state:		state: int;
 					forall i <- [0, instance.nrPiese-1]: state[i] != 0
#final-state: 		state:list<int>;
					forall i <- [0, instance.nrPiese-1]: state[i] == instance.nrTurnuri
#transition: 		state:list<int>, piece:int, tower:int;
					newState = state;
					newState[piece] = tower;
					return newState;
#valid-transition: 	state:list<int>, piece:int, tower:int;
					(forall i <- [0, piece-1]: state[i] != tower) &&
					(forall i <- [0, piece-1]: state[i] != state[piece])
#strategy:			random;
					piece <- [0, instance.nrPiese-1],
					tower <- [1, instance.nrTurnuri]
